@using OpenShock.ShockOsc.Services
@using OpenShock.ShockOsc.Utils
@using Serilog.Sinks.SystemConsole.Themes
@implements IAsyncDisposable
@inject ShockOsc ShockOsc


<MudPaper Outlined="true" Class="mud-paper-padding">
    <MudText>Avatar ID: @ShockOsc.AvatarId</MudText>
</MudPaper>
<MudPaper Outlined="true" Class="mud-paper-padding-margin">
    <MudText>OSC Parameters</MudText>
    <MudDivider/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_showAllAvatarParams" Label="Show all avatar parameters"/>
    <MudDivider/>
    <br/>
    @if (_showAllAvatarParams)
    {
        @foreach (var param in ShockOsc.AllAvatarParams)
        {
            <MudTextField Variant="Variant.Filled" Value="@param.Value" Label="@param.Key" ReadOnly/>
        }
    }
    else
    {
        @foreach (var param in ShockOsc.ShockOscParams)
        {
            <MudTextField Variant="Variant.Filled" Value="@param.Value" Label="@param.Key" ReadOnly/>
        }
    }

</MudPaper>

@code {
    private bool _showAllAvatarParams = false;

    private void OnParamsChange(bool shockOscParam)
    {
        // only redraw page when needed
        if (!_showAllAvatarParams && !shockOscParam)
            return;

        _updateQueued = true;
    }

    private bool _updateQueued = true;

    protected override void OnInitialized()
    {
        ShockOsc.OnParamsChange = OnParamsChange;
        OsTask.Run(UpdateParams);
    }

    private async Task UpdateParams()
    {
        while (!_cts.IsCancellationRequested)
        {
            if (!_updateQueued)
                continue;
            _updateQueued = false;

            await InvokeAsync(StateHasChanged);

            await Task.Delay(200);
        }
    }

    private CancellationTokenSource _cts = new CancellationTokenSource();


    public async ValueTask DisposeAsync()
    {
        await _cts.CancelAsync();
    }

}