@using System.Globalization
@using System.Reactive.Subjects
@using OpenShock.ShockOsc.Utils
@using OpenShock.ShockOsc.Ui.Components.Parts
@using System.Reactive.Linq
@using OpenShock.ShockOsc.Config
@using OpenShock.ShockOsc.Services
@implements IDisposable
@inject UnderscoreConfig underscoreConfig
@inject ConfigManager ConfigManager
@inject ShockOsc ShockOsc
@inject UnderscoreConfig UnderscoreConfig

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding">
    <MudText>Global Shocker Options (_All Shocker)</MudText>
    <MudDivider/>
    <MudPaper Style="display: inline-block; width: 200px; padding-top: 8px; padding-left: 5px">
        <MudSelect Class="option-width" @bind-Value="ConfigManager.Config.Behaviour.WhileBoneHeld" Label="While PhysBone Held" @bind-Value:after="OnSettingsValueChange">
            @foreach (BehaviourConf.BoneHeldAction boneHeldAction in Enum.GetValues(typeof(BehaviourConf.BoneHeldAction)))
            {
                <MudSelectItem Value="@boneHeldAction">@boneHeldAction</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
    
    <br/>
    <br/>
    <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.CooldownTime" Label="Cooldown Time" @bind-Value:after="OnSettingsValueChange"/>
    <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.HoldTime" Label="Contact Hold Time" @bind-Value:after="OnSettingsValueChange"/>
    <br/>
    <MudToggleGroup T="string" @bind-Value="RandomIntensityString" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
        <MudToggleItem Value="@("Fixed Intensity")"/>
        <MudToggleItem Value="@("Random Intensity")"/>
    </MudToggleGroup>
    <br/>


    @if (!ConfigManager.Config.Behaviour.RandomIntensity)
    {
    <DebouncedSlider T="byte" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.FixedIntensity"
                     OnSaveAction="_ => ConfigManager.SaveFnf()">
        Intensity: @ConfigManager.Config.Behaviour.FixedIntensity%
    </DebouncedSlider>
    }
    else
    {
    <DebouncedSlider T="uint" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.IntensityRange.Min"
                     OnValueChanged="u => { if (ConfigManager.Config.Behaviour.IntensityRange.Max < u) ConfigManager.Config.Behaviour.IntensityRange.Max = u; }"
                     OnSaveAction="_ => ConfigManager.SaveFnf()">
        Min Intensity: @ConfigManager.Config.Behaviour.IntensityRange.Min%
    </DebouncedSlider>

    <DebouncedSlider T="uint" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.IntensityRange.Max"
                     OnValueChanged="u => { if (ConfigManager.Config.Behaviour.IntensityRange.Min > u) ConfigManager.Config.Behaviour.IntensityRange.Min = u; }"
                     OnSaveAction="_ => ConfigManager.SaveFnf()">
        Max Intensity: @ConfigManager.Config.Behaviour.IntensityRange.Max%
    </DebouncedSlider>
    }
    

    <MudToggleGroup T="string" @bind-Value="RandomDurationString" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
        <MudToggleItem Value="@("Fixed Duration")"/>
        <MudToggleItem Value="@("Random Duration")"/>
    </MudToggleGroup>
    <br/>

    @if (!ConfigManager.Config.Behaviour.RandomDuration)
    {
        <DebouncedSlider T="uint" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.FixedDuration"
                         OnSaveAction="_ => ConfigManager.SaveFnf()"
                         Min="300" Max="30000" Step="100">
            Duration: @MathF.Round(ConfigManager.Config.Behaviour.FixedDuration / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
        </DebouncedSlider>
    }
    else
    {
        <DebouncedSlider T="uint" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.DurationRange.Min"
                         OnValueChanged="u => { if (ConfigManager.Config.Behaviour.DurationRange.Max < u) ConfigManager.Config.Behaviour.DurationRange.Max = u; }"
                         OnSaveAction="_ => ConfigManager.SaveFnf()"
                         Min="300" Max="30000" Step="100">
            Min Duration: @MathF.Round(ConfigManager.Config.Behaviour.DurationRange.Min / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
        </DebouncedSlider>

        <DebouncedSlider T="uint" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@ConfigManager.Config.Behaviour.DurationRange.Max"
                         OnValueChanged="u => { if (ConfigManager.Config.Behaviour.DurationRange.Min > u) ConfigManager.Config.Behaviour.DurationRange.Min = u; }"
                         OnSaveAction="_ => ConfigManager.SaveFnf()"
                         Min="300" Max="30000" Step="100">
            Max Duration: @MathF.Round(ConfigManager.Config.Behaviour.DurationRange.Max / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
        </DebouncedSlider>
    }

    <br/>
    <br/>
</MudPaper>

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
    <MudText>Game Options</MudText>
    <MudDivider/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="underscoreConfig.KillSwitch" Label="Kill Switch" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Behaviour.DisableWhileAfk" Label="Disable While Afk" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Behaviour.ForceUnmute" Label="Force Unmute" @bind-Value:after="OnSettingsValueChange"/>
</MudPaper>

@code {
    
    private string RandomIntensityString
    {
        get => ConfigManager.Config.Behaviour.RandomIntensity ? "Random Intensity" : "Fixed Intensity";
        set => ConfigManager.Config.Behaviour.RandomIntensity = value == "Random Intensity";
    }

    private string RandomDurationString
    {
        get => ConfigManager.Config.Behaviour.RandomDuration ? "Random Duration" : "Fixed Duration";
        set => ConfigManager.Config.Behaviour.RandomDuration = value == "Random Duration";
    }

    
    private async Task OnSettingsValueChange()
    {
        await ConfigManager.SaveAsync();
        await underscoreConfig.SendUpdateForAll();
    }

    protected override void OnInitialized()
    {
        UnderscoreConfig.OnConfigUpdate += OnConfigUpdate;
    }

    private void OnConfigUpdate()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UnderscoreConfig.OnConfigUpdate -= OnConfigUpdate;
    }

}