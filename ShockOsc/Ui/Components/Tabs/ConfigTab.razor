@using OpenShock.SDK.CSharp.Models
@using System.Reactive.Subjects
@using OpenShock.ShockOsc.Utils
@using System.Reactive.Linq
@using OpenShock.ShockOsc.Config
@using OpenShock.ShockOsc.Services
@implements IDisposable
@inject UnderscoreConfig underscoreConfig
@inject ConfigManager ConfigManager
@inject ShockOsc ShockOsc
@inject UnderscoreConfig UnderscoreConfig

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding">
    <MudText>Shocker Options</MudText>
    <MudDivider/>
    <MudPaper Style="display: inline-block; width: 200px; padding-top: 8px; padding-left: 5px">
        <MudSelect Class="option-width" @bind-Value="ConfigManager.Config.Behaviour.WhileBoneHeld" Label="While PhysBone Held" @bind-Value:after="OnSettingsValueChange">
            @foreach (BehaviourConf.BoneHeldAction boneHeldAction in Enum.GetValues(typeof(BehaviourConf.BoneHeldAction)))
            {
                <MudSelectItem Value="@boneHeldAction">@boneHeldAction</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
    <br/>
    <br/>
    <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.CooldownTime" Label="Cooldown Time" @bind-Value:after="OnSettingsValueChange"/>
    <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.HoldTime" Label="Contact Hold Time" @bind-Value:after="OnSettingsValueChange"/>
    <br/>
    <MudToggleGroup T="string" @bind-Value="intensity" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
        <MudToggleItem Value="@("Fixed Intensity")"/>
        <MudToggleItem Value="@("Random Intensity")"/>
    </MudToggleGroup>
    <br/>
    @if (intensity == "Fixed Intensity")
    {
        <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="FixedIntensity">Intensity: @FixedIntensity.ToString()%</MudSlider>
    }
    else
    {
        <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="IntensityMin">Intensity Min: @IntensityMin.ToString()%</MudSlider>
        <br/>
        <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="IntensityMax">Intensity Max: @IntensityMax.ToString()%</MudSlider>
    }
    <MudToggleGroup T="string" @bind-Value="duration" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
        <MudToggleItem Value="@("Fixed Duration")"/>
        <MudToggleItem Value="@("Random Duration")"/>
    </MudToggleGroup>
    <br/>
    @if (duration == "Fixed Duration")
    {
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.FixedDuration" Label="Duration" @bind-Value:after="OnSettingsValueChange"/>
    }
    else
    {
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.DurationRange.Min" Label="Duration Min" @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.DurationRange.Max" Label="Duration Max" @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Behaviour.RandomDurationStep" Label="Random Duration Step" @bind-Value:after="OnSettingsValueChange"/>
    }
    <br/>
    <br/>
</MudPaper>

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
    <MudText>Game Options</MudText>
    <MudDivider/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="underscoreConfig.KillSwitch" Label="Kill Switch" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Behaviour.DisableWhileAfk" Label="Disable While Afk" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Behaviour.ForceUnmute" Label="Force Unmute" @bind-Value:after="OnSettingsValueChange"/>
</MudPaper>

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
    <MudText>Chatbox Options</MudText>
    <MudDivider/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Osc.Chatbox" Label="Chatbox" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Chatbox.DisplayRemoteControl" Label="Display Remote Control" @bind-Value:after="OnSettingsValueChange"/>
    <br/>
    <br/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Osc.Hoscy" Label="Hoscy" @bind-Value:after="OnSettingsValueChange"/>
    <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Osc.HoscySendPort" Label="Hoscy Send Port" @bind-Value:after="OnSettingsValueChange"/>
    <MudPaper Style="display: inline-block; width: 200px; padding-top: 8px;">
        <MudSelect Class="option-width" @bind-Value="ConfigManager.Config.Chatbox.HoscyType" Label="Hoscy Type" @bind-Value:after="OnSettingsValueChange">
            @foreach (ChatboxConf.HoscyMessageType hoscyMessageType in Enum.GetValues(typeof(ChatboxConf.HoscyMessageType)))
            {
                <MudSelectItem Value="@hoscyMessageType">@hoscyMessageType</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
    <br/>
    <br/>
    <MudStack Spacing="0">
        @if (_advancedSettingsExpanded)
        {
            <MudButton OnClick="OnAdvancedSettingsClick" EndIcon="@Icons.Material.Filled.KeyboardArrowUp">Advanced Settings</MudButton>
        }
        else
        {
            <MudButton OnClick="OnAdvancedSettingsClick" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">Advanced Settings</MudButton>
        }
        <MudDivider/>
        <MudCollapse Expanded="_advancedSettingsExpanded">
            <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.Prefix" Label="Prefix Text" @bind-Value:after="OnSettingsValueChange"/>
            <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.IgnoredKillSwitchActive" Label="Ignored Kill Switch Text" @bind-Value:after="OnSettingsValueChange"/>
            <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.IgnoredAfk" Label="Ignored Afk Text" @bind-Value:after="OnSettingsValueChange"/>
            <br/>
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="rounded-lg">
                @foreach (ControlType controlType in Enum.GetValues(typeof(ControlType)))
                {
                    <MudTabPanel Text="@controlType.ToString()">
                        <MudCheckBox Class="option-checkbox-height" @bind-Value="ConfigManager.Config.Chatbox.Types[controlType].Enabled" Label="Enabled" @bind-Value:after="OnSettingsValueChange"/>
                        <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.Types[controlType].Local" Label="Local" @bind-Value:after="OnSettingsValueChange"/>
                        <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.Types[controlType].Remote" Label="Remote" @bind-Value:after="OnSettingsValueChange"/>
                        <MudTextField Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Chatbox.Types[controlType].RemoteWithCustomName" Label="Remote With Custom Name" @bind-Value:after="OnSettingsValueChange"/>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudCollapse>
    </MudStack>
</MudPaper>

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
    <MudText>OSC Options</MudText>
    <MudDivider/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Osc.QuestSupport" Label="Quest Support" @bind-Value:after="OnSettingsValueChange"/>
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.Osc.OscQuery" Label="OSC Query (requires restart)" @bind-Value:after="OnSettingsValueChange"/>
    @if (!ConfigManager.Config.Osc.OscQuery)
    {
        <br/>
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Osc.OscSendPort" Label="OSC Send Port" @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ConfigManager.Config.Osc.OscReceivePort" Label="OSC Receive Port" @bind-Value:after="OnSettingsValueChange"/>
    }
</MudPaper>

@code {
    private bool _advancedSettingsExpanded = false;

    private BehaviorSubject<byte> _fixedIntensitySubject = null!;

    private byte FixedIntensity
    {
        get => _fixedIntensitySubject.Value;
        set => _fixedIntensitySubject.OnNext(value);
    }
    
    private BehaviorSubject<byte> _intensityMinSubject = null!;

    private byte IntensityMin
    {
        get => _intensityMinSubject.Value;
        set
        {
            if (value > IntensityMax) IntensityMax = value;
            _intensityMinSubject.OnNext(value);
        }
    }

    private BehaviorSubject<byte> _intensityMaxSubject = null!;

    private byte IntensityMax
    {
        get => _intensityMaxSubject.Value;
        set
        {
            if (value < IntensityMin) IntensityMin = value;
            _intensityMaxSubject.OnNext(value);
        }
    }


    private string intensity = "Fixed Intensity";
    private string duration = "Fixed Duration";

    private DateTime _lastSettingsSave = DateTime.Now;
    private CancellationTokenSource _cts = new CancellationTokenSource();

    private void OnAdvancedSettingsClick()
    {
        _advancedSettingsExpanded = !_advancedSettingsExpanded;
    }

    private async Task OnSettingsValueChange()
    {
        _lastSettingsSave = DateTime.Now;
        ConfigManager.Config.Behaviour.RandomIntensity = intensity == "Random Intensity";
        ConfigManager.Config.Behaviour.RandomDuration = duration == "Random Duration";

        await ConfigManager.SaveAsync();
        await underscoreConfig.SendUpdateForAll();
    }

    protected override void OnInitialized()
    {
        UnderscoreConfig.OnConfigUpdate += OnConfigUpdate;

        intensity = ConfigManager.Config.Behaviour.RandomIntensity ? "Random Intensity" : "Fixed Intensity";
        duration = ConfigManager.Config.Behaviour.RandomDuration ? "Random Duration" : "Fixed Duration";

        _fixedIntensitySubject = new BehaviorSubject<byte>(ConfigManager.Config.Behaviour.FixedIntensity);
        _fixedIntensitySubject.Throttle(TimeSpan.FromMilliseconds(100)).Subscribe(b =>
        {
            ConfigManager.Config.Behaviour.FixedIntensity = b;
            OsTask.Run(OnSettingsValueChange);
        });
        
        _intensityMinSubject = new BehaviorSubject<byte>((byte)ConfigManager.Config.Behaviour.IntensityRange.Min);
        _intensityMinSubject.Throttle(TimeSpan.FromMilliseconds(100)).Subscribe(b =>
        {
            ConfigManager.Config.Behaviour.IntensityRange.Min = b;
            OsTask.Run(OnSettingsValueChange);
        });
        
        _intensityMaxSubject = new BehaviorSubject<byte>((byte)ConfigManager.Config.Behaviour.IntensityRange.Max);
        _intensityMaxSubject.Throttle(TimeSpan.FromMilliseconds(100)).Subscribe(b =>
        {
            ConfigManager.Config.Behaviour.IntensityRange.Max = b;
            OsTask.Run(OnSettingsValueChange);
        });
    }

    private void OnConfigUpdate()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UnderscoreConfig.OnConfigUpdate -= OnConfigUpdate;
    }

}