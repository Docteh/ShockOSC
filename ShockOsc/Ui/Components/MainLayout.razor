@using System.Text.Json.Serialization
@using System.Diagnostics
@using OpenShock.ShockOsc.Ui.Components.Layout
@using OpenShock.ShockOsc.Models;
@using Serilog
@inject ISnackbar Snackbar
@inherits LayoutComponentBase

<MudThemeProvider Theme="_myCustomTheme" />
<MudDialogProvider/>
<MudSnackbarProvider/>

@code {
    private static readonly ILogger Logger = Log.ForContext(typeof(MainLayout));
    
    readonly MudTheme _myCustomTheme = new()
    {
        Palette = new PaletteDark
        {
            Primary = "#8f38fd",
            PrimaryDarken = "#722cca",
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
            Background = "#2f2f2f",
            Surface = "#1f1f1f",
        },
        LayoutProperties = new LayoutProperties
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        },
        Typography = new Typography
        {
            Default = new Default
            {
                FontFamily = new string[] { "'Poppins', Roboto, Helvetica, Arial, sans-serif" }
            },
        }
    };
}

<MudLayout>
    <Logo/>

@*  <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_loading" Label="Loading" />
    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_authenticated" Label="Authed" /> *@
        
    @if (!_authenticated)
    {
        <Login Loading="@_loading" />
    }
    else
    {
        <MudContainer>
            <MudTabs @bind-ActivePanelIndex="activePageIndex" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="rounded-lg">
                <MudTabPanel Text="Config">
                    <MudPaper Class="rounded-lg" Style="padding: 10px 15px; margin: 20px 0;">
                        <MudText>Chatbox Options</MudText>
                        <MudDivider />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Osc.Chatbox" Label="Chatbox" @bind-Value:after="OnSettingsValueChange" />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Chatbox.DisplayRemoteControl" Label="Display Remote Control" @bind-Value:after="OnSettingsValueChange" />
                        <br/>
                        <br />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Osc.Hoscy" Label="Hoscy" @bind-Value:after="OnSettingsValueChange" />
                        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Osc.HoscySendPort" Label="Hoscy Send Port" @bind-Value:after="OnSettingsValueChange" />
                        <MudPaper Style="display: inline-block; width: 200px; padding-top: 8px;">
                            <MudSelect Class="option-width" @bind-Value="_config.Chatbox.HoscyType" Label="Hoscy Type" @bind-Value:after="OnSettingsValueChange">
                                @foreach (Config.Conf.ChatboxConf.HoscyMessageType hoscyMessageType in Enum.GetValues(typeof(Config.Conf.ChatboxConf.HoscyMessageType)))
                                {
                                    <MudSelectItem Value="@hoscyMessageType">@hoscyMessageType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                        <br />
                        <br />  
                        <MudStack Spacing="0">
                            <MudButton OnClick="OnAdvancedSettingsClick">@(_advancedSettingsExpanded ? "Advanced Settings" : "Advanced Settings")</MudButton>
                            <MudDivider />
                            <MudCollapse Expanded="_advancedSettingsExpanded">
                                <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.Prefix" Label="Prefix Text" @bind-Value:after="OnSettingsValueChange" />
                                <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.IgnoredKillSwitchActive" Label="Ignored Kill Switch Text" @bind-Value:after="OnSettingsValueChange" />
                                <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.IgnoredAfk" Label="Ignored Afk Text" @bind-Value:after="OnSettingsValueChange" />
                                <br />
                                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="rounded-lg">
                                    @foreach (ControlType controlType in Enum.GetValues(typeof(ControlType)))
                                    {
                                        <MudTabPanel Text="@controlType.ToString()">
                                            <MudCheckBox Class="option-checkbox-height" @bind-Value="_config.Chatbox.Types[controlType].Enabled" Label="Enabled" @bind-Value:after="OnSettingsValueChange" />
                                            <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.Types[controlType].Local" Label="Local" @bind-Value:after="OnSettingsValueChange" />
                                            <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.Types[controlType].Remote" Label="Remote" @bind-Value:after="OnSettingsValueChange" />
                                            <MudTextField Variant="Variant.Filled" @bind-Value="_config.Chatbox.Types[controlType].RemoteWithCustomName" Label="Remote With Custom Name" @bind-Value:after="OnSettingsValueChange" />
                                        </MudTabPanel>
                                    }
                                </MudTabs>
                            </MudCollapse>
                        </MudStack>
                    </MudPaper>
                    
                    <MudPaper Class="rounded-lg" Style="padding: 10px 15px; margin: 20px 0;">
                        <MudText>Shocker Options</MudText>
                        <MudDivider />
                        <MudPaper Style="display: inline-block; width: 200px; padding-top: 8px;">
                            <MudSelect Class="option-width" @bind-Value="_config.Behaviour.WhileBoneHeld" Label="While PhysBone Held" @bind-Value:after="OnSettingsValueChange">
                                @foreach (Config.Conf.BehaviourConf.BoneHeldAction boneHeldAction in Enum.GetValues(typeof(Config.Conf.BehaviourConf.BoneHeldAction)))
                                {
                                    <MudSelectItem Value="@boneHeldAction">@boneHeldAction</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.CooldownTime" Label="Cooldown Time" @bind-Value:after="OnSettingsValueChange" />
                        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.HoldTime" Label="Contact Hold Time" @bind-Value:after="OnSettingsValueChange" />
                        <br/>
                        <MudToggleGroup T="string" @bind-Value="intensity" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
                            <MudToggleItem Value="@("Fixed Intensity")"  />
                            <MudToggleItem Value="@("Random Intensity")" />
                        </MudToggleGroup>
                        <br />
                        @if (intensity == "Fixed Intensity")
                        {
                            <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="_config.Behaviour.FixedIntensity" @bind-Value:after="OnSettingsValueChange">Intensity: @_config.Behaviour.FixedIntensity.ToString()%</MudSlider>
                        }
                        else
                        {
                            <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="_config.Behaviour.IntensityRange.Min" @bind-Value:after="OnSettingsValueChange">Intensity Min: @_config.Behaviour.IntensityRange.Min.ToString()%</MudSlider>
                            <br/>
                            <MudSlider Size="Size.Large" Style="width: 300px; margin-left: 30px;" @bind-Value="_config.Behaviour.IntensityRange.Max" @bind-Value:after="OnSettingsValueChange">Intensity Max: @_config.Behaviour.IntensityRange.Max.ToString()%</MudSlider>
                        }
                        <MudToggleGroup T="string" @bind-Value="duration" Style="width: 330px; margin: 30px 0 0 10px;" Outline="true" Delimiters="true" Dense="true" Rounded="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnSettingsValueChange">
                            <MudToggleItem Value="@("Fixed Duration")" />
                            <MudToggleItem Value="@("Random Duration")" />
                        </MudToggleGroup>
                        <br />
                        @if (duration == "Fixed Duration")
                        {
                            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.FixedDuration" Label="Duration" @bind-Value:after="OnSettingsValueChange" />
                        }
                        else
                        {
                            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.DurationRange.Min" Label="Duration Min" @bind-Value:after="OnSettingsValueChange" />
                            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.DurationRange.Max" Label="Duration Max" @bind-Value:after="OnSettingsValueChange" />
                            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_config.Behaviour.RandomDurationStep" Label="Random Duration Step" @bind-Value:after="OnSettingsValueChange" />
                        }
                        <br />
                        <br />
                    </MudPaper>

                    <MudPaper Class="rounded-lg" Style="padding: 10px 15px; margin: 20px 0;">
                        <MudText>Other Options</MudText>
                        <MudDivider />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="UnderscoreConfig.KillSwitch" Label="Kill Switch" />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Behaviour.DisableWhileAfk" Label="Disable While Afk" @bind-Value:after="OnSettingsValueChange" />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Behaviour.ForceUnmute" Label="Force Unmute" @bind-Value:after="OnSettingsValueChange" />
                        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_config.Osc.QuestSupport" Label="Quest Support" @bind-Value:after="OnSettingsValueChange" />
                    </MudPaper>

                </MudTabPanel>
                <MudTabPanel Text="Shockers">
                    <MudButton OnClick="ShockLinkApi.GetShockers" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary">Refresh</MudButton>
                    @foreach (var shocker in _config.ShockLink.Shockers)
                    {
                        // side by side flex
                        <MudContainer Class="d-flex align-content-center" Style="padding: 0;">
                            <MudField Variant="Variant.Text">@shocker.Key</MudField>
                            <MudField Variant="Variant.Text">@shocker.Value</MudField>
                        </MudContainer>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Debug">
                    <MudText>List of ShockOSC prefixed parameters and their states</MudText>
                    <MudText>AvatarId: @ShockOsc.AvatarId</MudText>
                    <br/>
                    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_showAllAvatarParams" Label="Show all avatar parameters" />
                    <MudDivider />
                    <br/>
                    @if (_showAllAvatarParams)
                    {
                        @foreach (var param in ShockOsc.AllAvatarParams)
                        {
                            <MudTextField Variant="Variant.Filled" Value="@param.Value" Label="@param.Key" ReadOnly />
                        }
                    }
                    else
                    {
                        @foreach (var param in ShockOsc.ParamsInUse)
                        {
                            <MudTextField Variant="Variant.Filled" Value="@param.Value" Label="@param.Key" ReadOnly />
                        }
                    }
                </MudTabPanel>
                <MudTabPanel Text="Logs">
                    @{int i = 0;}
                    @foreach (var log in Serilog.LogStore.Logs)
                    {
                        if (i > 1000)
                            break;
                        i++;
                        <MudField Label="@log.Time.ToString("HH:mm:ss")" Variant="Variant.Filled">@log.Message</MudField>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudContainer>
    }
</MudLayout>

@code {
    private int activePageIndex = 0;
    private bool _advancedSettingsExpanded = false;
    private bool _showAllAvatarParams = false;

    private Config.Conf _config;

    private string intensity = "Fixed Intensity";
    private string duration = "Fixed Duration";

    private bool _loading = false;
    private bool _authenticated = false;



    private void OnAdvancedSettingsClick()
    {
        _advancedSettingsExpanded = !_advancedSettingsExpanded;
    }

    private void OnParamsChange(bool shockOscParam)
    {
        // check Debug page is active
        if (activePageIndex != 2)
            return;

        // only redraw page when needed
        if (!_showAllAvatarParams && !shockOscParam)
            return;

        InvokeAsync(StateHasChanged);
    }

    private void OnLogAdded()
    {
        // check Log page is active
        if (activePageIndex == 3)
            InvokeAsync(StateHasChanged);
    }

    private void MsgNoty(string msg, Severity severity)
    {
        Snackbar.Add(msg, severity);
    }

    private Task OnSettingsValueChange()
    {
        _config.Behaviour.RandomIntensity = intensity == "Random Intensity";
        _config.Behaviour.RandomDuration = duration == "Random Duration";
        ValidateSettings();

        Logger.Information("settings changed");
        Config.Save();
        return Task.CompletedTask;
    }

    private void ValidateSettings()
    {
        if (_config.Behaviour.IntensityRange.Min > _config.Behaviour.IntensityRange.Max)
        {
            _config.Behaviour.IntensityRange.Max = _config.Behaviour.IntensityRange.Min;
        }
    }

    private void SetAuthLoading(bool auth, bool loading)
    {
        _authenticated = auth;
        _loading = loading;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        ShockOsc.SetAuthLoading = SetAuthLoading;
        ShockOsc.OnParamsChange = OnParamsChange;
        MySink.NotificationAction = MsgNoty;
        LogStore.OnLogAdded = OnLogAdded;

        _config = Config.ConfigInstance;
        intensity = _config.Behaviour.RandomIntensity ? "Random Intensity" : "Fixed Intensity";
        duration = _config.Behaviour.RandomDuration ? "Random Duration" : "Fixed Duration";
    }
}