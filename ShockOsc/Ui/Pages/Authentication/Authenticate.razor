@using OpenShock.ShockOsc.Ui.Utils
@using OpenShock.SDK.CSharp.Live
@using OpenShock.ShockOsc.Backend
@using OpenShock.ShockOsc.Config
@using Microsoft.Extensions.Logging
@using OpenShock.SDK.CSharp.Hub
@using OpenShock.ShockOsc.Services
@inherits LayoutComponentBase

@inject ConfigManager ConfigManager
@inject NavigationManager NavigationManager
@inject BackendHubManager HubManager
@inject OpenShockHubClient HubClient
@inject OpenShockApi ApiClient
@inject ILogger<Authenticate> Logger
@inject LiveControlManager LiveControlManager

@page "/"

<MudThemeProvider Theme="ThemeDefinition.ShockOscTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudContainer Class="d-flex align-content-center" Style="padding: 0 0 15px 0;">
    <MudContainer Style="width: 600px; padding: 0;">
        <MudImage Src="images/Icon.svg" Alt="Logo" Width="75" Height="75" Class="ma-4" Style="vertical-align: bottom;" />
        <MudContainer Class="d-inline-block" Style="width: 485px; padding: 0;">
            <MudText Typo="Typo.h1">ShockOSC</MudText>
        </MudContainer>
    </MudContainer>
</MudContainer>


<MudContainer Class="align-content-center" MaxWidth="MaxWidth.Small" Style="padding-top: 30px">
    <MudPaper Class="rounded-lg" Elevation="0" Style="padding: 40px 20px; text-align: center;" Outlined="true">
        <MudText Typo="Typo.h2">Login</MudText>
        <br/>
        @if (!Loading)
        {
            <MudTextField @bind-Value="ConfigManager.Config.OpenShock.Token" Label="API Token" Variant="Variant.Outlined"></MudTextField>
            <br />
            <MudButton OnClick="Login" Variant="Variant.Filled" Color="Color.Primary" Style="float: right;">Continue</MudButton>
            <br />
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Style="height:125px;width:125px;" Indeterminate="true" />
        }
    </MudPaper>
</MudContainer> 

@code {
    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrEmpty(ConfigManager.Config.OpenShock.Token)) return;

        await ProceedAuthenticated();
    }

    public async Task Login()
    {
        await ConfigManager.SaveAsync();
        ApiClient.SetupApiClient();
        await ProceedAuthenticated();
    }

    private async Task ProceedAuthenticated()
    {
        Loading = true;
        
        Logger.LogInformation("Setting up live client");
        await HubManager.SetupLiveClient();
        Logger.LogInformation("Starting live client");
        await HubClient.StartAsync();
        
        Logger.LogInformation("Refreshing shockers");
        await ApiClient.RefreshShockers();

        await LiveControlManager.RefreshConnections();

        NavigationManager.NavigateTo("main");
    }
}